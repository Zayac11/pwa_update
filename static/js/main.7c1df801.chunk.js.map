{"version":3,"sources":["assets/logo.png","firebase.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["module","exports","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","console","log","messaging","getMessaging","App","useState","isTokenFound","setTokenFound","title","body","setNotification","getToken","vapidKey","then","currentToken","catch","err","getTokenProject","obj","e","Promise","resolve","onMessage","payload","notification","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.7c1df801.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f920c3a5.png\";","// Import the functions you need from the SDKs you need\r\nimport {initializeApp} from \"firebase/app\";\r\nimport {getToken, onMessage} from 'firebase/messaging';\r\nimport {getMessaging} from 'firebase/messaging/sw';\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// if ('serviceWorker' in navigator) {\r\n//     navigator.serviceWorker.register('./firebase-messaging-sw.js')\r\n//         .then(function(registration) {\r\n//             console.log('Registration successful, scope is:', registration.scope);\r\n//         }).catch(function(err) {\r\n//         console.log('Service worker registration failed, error:', err);\r\n//     });\r\n// }\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyD1m73HH4RCztpFmT9uxN8s46HW1wwmc6Q\",\r\n    authDomain: \"notify-test-a992c.firebaseapp.com\",\r\n    projectId: \"notify-test-a992c\",\r\n    storageBucket: \"notify-test-a992c.appspot.com\",\r\n    messagingSenderId: \"328813344088\",\r\n    appId: \"1:328813344088:web:752699eb65b01eeffb212d\",\r\n    measurementId: \"G-799H92E7C0\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconsole.log(app)\r\nconst messaging = getMessaging(app)\r\n\r\nexport const getTokenProject = (setTokenFound) => {\r\n    return getToken(messaging,{vapidKey: 'BDGYA-Pd4RQl-w12n5U9HArh0bO4q5ai3j3AR_1VX813-dbaAiu5VJCv03Pohb4xcC0K4-57m6JDax6jchGkhA8'})\r\n        .then((currentToken) => {\r\n            if (currentToken) {\r\n                console.log('current token for client: ', currentToken);\r\n                setTokenFound(true);\r\n                // Track the token -> client mapping, by sending to backend server\r\n                // show on the UI that permission is secured\r\n            } else {\r\n                console.log('No registration token available. Request permission to generate one.');\r\n                setTokenFound(false);\r\n                // shows on the UI that permission is required\r\n            }\r\n        })\r\n        .catch((err) => {\r\n        console.log('An error occurred while retrieving token. ', err);\r\n        // catch error while creating client token\r\n    })\r\n}\r\n\r\n// export const onMessageListener = () =>\r\n//     new Promise((resolve) => {\r\n//         onMessage(messaging, (payload) => {\r\n//             resolve(payload);\r\n//         });\r\n//     });\r\n\r\nexport const onMessageListener = () =>\r\n    new Promise((resolve) => {\r\n        onMessage(messaging, (payload) => {\r\n            resolve(payload);\r\n        });\r\n    });","import React, {useState} from 'react'\nimport './App.css'\nimport './firebase.js'\nimport Notify from './components/Notify/Notify'\nimport {getTokenProject, onMessageListener} from './firebase'\n\nfunction App() {\n\n    const [isTokenFound, setTokenFound] = useState(false);\n    const [notification, setNotification] = useState({ title: \"\", body: \"\" });\n    getTokenProject(setTokenFound)\n        .then(obj => console.log(obj))\n        .catch(e => console.log('token error:', e))\n\n    onMessageListener()\n        .then((payload) => {\n            setNotification({\n                title: payload.notification.title,\n                body: payload.notification.body,\n            });\n            console.log(payload);\n        })\n        .catch((err) => console.log(\"failed: \", err));\n    return (\n        <div className='container'>\n            update2\n            {isTokenFound && <h1> Notification permission enabled 👍🏻 </h1>}\n            {!isTokenFound && <h1> Need notification permission ❗️ </h1>}\n            {/*<Notify />*/}\n        </div>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://cra.link/PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://cra.link/PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n\n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}