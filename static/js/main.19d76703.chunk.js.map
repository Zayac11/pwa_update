{"version":3,"sources":["assets/logo.png","firebase.js","components/Notify/Notify.jsx","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["module","exports","navigator","serviceWorker","register","then","registration","console","log","scope","catch","err","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","messaging","getMessaging","onMessage","payload","Notify","window","alert","button","useRef","listener","Notification","requestPermission","permission","useEffect","current","addEventListener","removeEventListener","ref","onClick","options","body","icon","vibrate","tag","image","logo","badge","actions","action","title","ready","e","showNotification","rightNow","setTimeout","App","useState","isTokenFound","setTokenFound","getToken","vapidKey","currentToken","getTokenProject","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.19d76703.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f920c3a5.png\";","// Import the functions you need from the SDKs you need\r\nimport {initializeApp} from \"firebase/app\";\r\nimport {getToken, onMessage} from 'firebase/messaging';\r\nimport {getMessaging, onBackgroundMessage} from 'firebase/messaging/sw';\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\nexport function registerFirebase() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        window.addEventListener('load', function () {\r\n            navigator.serviceWorker.register('./firebase-messaging-sw.js')\r\n                .then(function(registration) {\r\n                    console.log('Registration successful, scope is:', registration.scope);\r\n                }).catch(function(err) {\r\n                console.log('Service worker registration failed, error:', err);\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nif ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.register('./firebase-messaging-sw.js')\r\n        .then(function(registration) {\r\n            console.log('Registration successful, scope is:', registration.scope);\r\n        }).catch(function(err) {\r\n        console.log('Service worker registration failed, error:', err);\r\n    });\r\n}\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyD1m73HH4RCztpFmT9uxN8s46HW1wwmc6Q\",\r\n    authDomain: \"notify-test-a992c.firebaseapp.com\",\r\n    projectId: \"notify-test-a992c\",\r\n    storageBucket: \"notify-test-a992c.appspot.com\",\r\n    messagingSenderId: \"328813344088\",\r\n    appId: \"1:328813344088:web:752699eb65b01eeffb212d\",\r\n    measurementId: \"G-799H92E7C0\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconsole.log(app)\r\nconst messaging = getMessaging(app)\r\n\r\nexport const getTokenProject = (setTokenFound) => {\r\n    return getToken(messaging,{vapidKey: 'BDGYA-Pd4RQl-w12n5U9HArh0bO4q5ai3j3AR_1VX813-dbaAiu5VJCv03Pohb4xcC0K4-57m6JDax6jchGkhA8'})\r\n        .then((currentToken) => {\r\n            if (currentToken) {\r\n                console.log('current token for client: ', currentToken);\r\n                setTokenFound(true);\r\n                // Track the token -> client mapping, by sending to backend server\r\n                // show on the UI that permission is secured\r\n            } else {\r\n                console.log('No registration token available. Request permission to generate one.');\r\n                setTokenFound(false);\r\n                // shows on the UI that permission is required\r\n            }\r\n        })\r\n        .catch((err) => {\r\n        console.log('An error occurred while retrieving token. ', err);\r\n        // catch error while creating client token\r\n    })\r\n}\r\n\r\n// export const onMessageListener = () =>\r\n//     new Promise((resolve) => {\r\n//         onMessage(messaging, (payload) => {\r\n//             resolve(payload);\r\n//         });\r\n//     });\r\n\r\nonMessage(messaging, (payload) => {\r\n    console.log('Message received. ', payload);\r\n});","import React, {useEffect, useRef} from 'react'\r\nimport logo from '../../assets/logo.png'\r\n\r\nconst Notify = () => {\r\n    // navigator.setAppBadge(42).then(() => {\r\n    //     console.log(\"The badge was added\");\r\n    // }).catch(e => {\r\n    //     console.log(\"Error displaying the badge\");\r\n    // });\r\n    if (\"Notification\" in window) {\r\n        // window.alert(\"The Notifications API is supported\");\r\n    }\r\n    else {\r\n        window.alert(\"The Notifications API isn't supported\");\r\n    }\r\n    let button = useRef(null)\r\n    if ('serviceWorker' in navigator) {\r\n    }\r\n    const listener = () => {\r\n        Notification.requestPermission().then(permission => {\r\n            if (permission === \"granted\") {\r\n                window.alert(\"The user accepted\");\r\n            }\r\n        });\r\n    }\r\n    // if (Notification.permission === \"granted\") {\r\n    //     const notification = new Notification(\"ArtWay\", {\r\n    //         body: \"Добавлена новая комната!\",\r\n    //         icon: logo,\r\n    //     });\r\n    // }\r\n    const rightNow = () => {\r\n        if (Notification.permission === \"granted\") {\r\n            const options = {\r\n                body: \"Добавлена новая комнатаss!\",\r\n                icon: \"/images/jason-leung-HM6TMmevbZQ-unsplash.jpg\",\r\n                vibrate: [200, 100, 200],\r\n                tag: \"new-product\",\r\n                image: logo,\r\n                badge: \"https://spyna.it/icons/android-icon-192x192.png\",\r\n                actions: [{ action: \"Detail\", title: \"View\", icon: logo }]\r\n            }\r\n            navigator.serviceWorker.ready.then(e => {debugger})\r\n            navigator.serviceWorker.ready.then(\r\n                function (serviceWorker) {\r\n                    serviceWorker.showNotification('ArtWay', options)\r\n                        .then (e => {\r\n                            debugger\r\n                        })\r\n                }\r\n            )\r\n            // const notification = new Notification(\"ArtWay\", {\r\n            //     body: \"Добавлена новая комната!\",\r\n            //     icon: logo,\r\n            // });\r\n        }\r\n    }\r\n    const after = () => {\r\n        setTimeout(() => {\r\n            if (Notification.permission === \"granted\") {\r\n                const notification = new Notification(\"ArtWay\", {\r\n                    body: \"Добавлена новая комната спустя 5 секунд\",\r\n                    icon: logo,\r\n                });\r\n            }\r\n        }, 5000)\r\n    }\r\n    useEffect(() => {\r\n        button.current.addEventListener(\"click\", listener);\r\n\r\n        return () => {\r\n            button.current.removeEventListener(\"click\", listener);\r\n        }\r\n    })\r\n    return (\r\n        <div>\r\n            nothing\r\n            <button ref={button}>alo</button>\r\n            <div>\r\n                <button onClick={() => rightNow()}>right now</button>\r\n            </div>\r\n            <div>\r\n                <button onClick={() => after()}>after 5 sec</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notify","import React, {useState} from 'react'\nimport './App.css'\nimport './firebase.js'\nimport Notify from './components/Notify/Notify'\nimport {getTokenProject} from './firebase'\n\nfunction App() {\n\n    const [isTokenFound, setTokenFound] = useState(false);\n    getTokenProject(setTokenFound);\n\n    // onMessageListener().then(payload => {\n    //     // setShow(true);\n    //     // setNotification({title: payload.notification.title, body: payload.notification.body})\n    //     console.log(payload);\n    // }).catch(err => console.log('failed: ', err));\n    return (\n        <div className='container'>\n            update2\n            {isTokenFound && <h1> Notification permission enabled 👍🏻 </h1>}\n            {!isTokenFound && <h1> Need notification permission ❗️ </h1>}\n            <Notify />\n        </div>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://cra.link/PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://cra.link/PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport {registerFirebase} from './firebase'\n\nReactDOM.render(\n\n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\nregisterFirebase();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}