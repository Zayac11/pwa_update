{"version":3,"sources":["assets/logo.png","components/Notify/Notify.jsx","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["module","exports","Notify","navigator","setAppBadge","then","console","log","catch","e","error","window","button","useRef","listener","Notification","requestPermission","permission","body","icon","logo","useEffect","current","addEventListener","removeEventListener","ref","App","className","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,gLC0C5BC,EAvCA,WACXC,UAAUC,YAAY,IAAIC,MAAK,WAC3BC,QAAQC,IAAI,0BACbC,OAAM,SAAAC,GACLH,QAAQI,MAAM,6BAA8BD,MAE5C,iBAAkBE,QAClBL,QAAQC,IAAI,sCAEhB,IAAIK,EAASC,iBAAO,MACdC,EAAW,WACbC,aAAaC,oBAAoBX,MAAK,SAAAY,GAClC,GAAmB,YAAfA,EAA0B,CAC1BX,QAAQC,IAAI,qBACS,IAAIQ,aAAa,qBAIlD,GAAgC,YAA5BA,aAAaE,WACQ,IAAIF,aAAa,SAAU,CAC5CG,KAAM,oIACNC,KAAMC,MAUd,OAPAC,qBAAU,WAGN,OAFAT,EAAOU,QAAQC,iBAAiB,QAAST,GAElC,WACHF,EAAOU,QAAQE,oBAAoB,QAASV,OAIhD,uCAEI,4BAAQW,IAAKb,GAAb,SChBGc,MAhBf,WACI,OACI,yBAAKC,UAAU,aAAf,+BAEI,2CAGA,mEAGA,4BAAQC,GAAI,iBAAZ,SACA,kBAAC,EAAD,QCJGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCKRO,EAAcC,QACa,cAA7B3B,OAAO4B,SAASC,UAEa,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC5BzC,UAAU0C,cACLC,SAASH,GACTtC,MAAK,SAAC0C,GACHA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACE,cAA3BF,EAAiBG,QACbjD,UAAU0C,cAAcQ,YAIxB/C,QAAQC,IACJ,+GAKAqC,GAAUA,EAAOU,UACjBV,EAAOU,SAASP,KAMpBzC,QAAQC,IAAI,sCAGRqC,GAAUA,EAAOW,WACjBX,EAAOW,UAAUR,WAOxCvC,OAAM,SAACE,GACJJ,QAAQI,MAAM,4CAA6CA,MCvFvE8C,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDSnB,SAAkBf,GACrB,GAA6C,kBAAmBzC,UAAW,CAGvE,GADkB,IAAIyD,IAAIC,cAAwBlD,OAAO4B,SAASuB,MACpDC,SAAWpD,OAAO4B,SAASwB,OAIrC,OAGJpD,OAAOY,iBAAiB,QAAQ,WAC5B,IAAMoB,EAAK,UAAMkB,cAAN,sBAEPxB,IAgEhB,SAAiCM,EAAOC,GAEpCoB,MAAMrB,EAAO,CACTsB,QAAS,CAAE,iBAAkB,YAE5B5D,MAAK,SAAC6D,GAEH,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEjB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CnE,UAAU0C,cAAc0B,MAAMlE,MAAK,SAAC0C,GAChCA,EAAayB,aAAanE,MAAK,WAC3BM,OAAO4B,SAASkC,eAKxB/B,EAAgBC,EAAOC,MAG9BpC,OAAM,WACHF,QAAQC,IAAI,oEAtFRmE,CAAwB/B,EAAOC,GAI/BzC,UAAU0C,cAAc0B,MAAMlE,MAAK,WAC/BC,QAAQC,IACJ,+GAMRmC,EAAgBC,EAAOC,OC/BvC+B,GAKA9C,M","file":"static/js/main.3f11c126.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f920c3a5.png\";","import React, {useEffect, useRef} from 'react'\r\nimport logo from '../../assets/logo.png'\r\n\r\nconst Notify = () => {\r\n    navigator.setAppBadge(42).then(() => {\r\n        console.log(\"The badge was added\");\r\n    }).catch(e => {\r\n        console.error(\"Error displaying the badge\", e);\r\n    });\r\n    if (\"Notification\" in window) {\r\n        console.log(\"The Notifications API is supported\");\r\n    }\r\n    let button = useRef(null)\r\n    const listener = () => {\r\n        Notification.requestPermission().then(permission => {\r\n            if (permission === \"granted\") {\r\n                console.log(\"The user accepted\");\r\n                const notification = new Notification(\"Hello World!\");\r\n            }\r\n        });\r\n    }\r\n    if (Notification.permission === \"granted\") {\r\n        const notification = new Notification(\"ArtWay\", {\r\n            body: \"Добавлена новая комната!\",\r\n            icon: logo,\r\n        });\r\n    }\r\n    useEffect(() => {\r\n        button.current.addEventListener(\"click\", listener);\r\n\r\n        return () => {\r\n            button.current.removeEventListener(\"click\", listener);\r\n        }\r\n    })\r\n    return (\r\n        <div>\r\n            nothing\r\n            <button ref={button}>alo</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notify","import React from 'react'\nimport './App.css'\nimport logo from './assets/logo.png'\nimport Notify from './components/Notify/Notify'\n\nfunction App() {\n    return (\n        <div className='container'>\n            text text text update update\n            <div>\n                text v div\n            </div>\n            <div>\n                final exam chtobi ponyat' nakonetc\n            </div>\n            <button id={'notifications'}>hello</button>\n            <Notify />\n        </div>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://cra.link/PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://cra.link/PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n\n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}